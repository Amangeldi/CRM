@using System.Net.Http
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using CRM.BLL.DTO
@using CRM.DAL.Entities
@using CRM.BLL.Services
@using System.Threading;
@using CRM.RAZOR.Models;
@implements IDisposable
@inject CRM.BLL.Services.SelectedItemService SelectService
@inject CRM.BLL.Interfaces.IMailFindService MailFindService
@inject CRM.RAZOR.Mappings.CompanyMap CompanyMap
@inject CRM.BLL.Interfaces.ILogService logService
@inject CRM.BLL.Services.TempService TempService
@inject CRM.BLL.Services.LogTemp LogTemp
<div class="prospect-finder">
    <!-- The Modal -->
    <div id="myModal" class="modal" style="display:@ModalDisplay">

        <!-- Modal content -->
        <div class="modal-content">
            <span class="close" @onclick="Close">&times;</span>
            <p>Отправить сообщение @checkedContacts.Count людям</p>
            @if (SendForContacts != null)
            {
                @foreach (var contact in SendForContacts)
                {
                    @contact.Email <br />
                }
            }
            <butto @onclick="async _=>await AddLog(count:SendForContacts.Count())">OK</butto><button @onclick="Close">Cancel</button>

        </div>

    </div>
    @if (SelectedId != 0)
    {
        <button>Найти контакты для @CompanyModel.TradingName</button>


        @if (checkedContacts != null)
        {
            <button @onclick="Send">Отправить в lemmlist @checkedContacts.Count адресов </button>
        }
        @if (contacts != null)
        {
            <table>
                <thead>
                    <tr>
                        <th colspan="7">
                            Найденные контакты @CompanyModel.CompanyLegalName
                        </th>
                    </tr>
                    <tr>
                        <th>
                            Id
                        </th>
                        <th>
                            Должность
                        </th>
                        <th>
                            Email
                        </th>
                        <th>
                            Имя
                        </th>
                        <th>
                            Фамилия
                        </th>
                        <th>
                            Linkedin Id
                        </th>
                        <th>
                            Выбрать
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var contact in contacts)
                    {
                        <tr>
                            <td>
                                @contact.Id
                            </td>
                            <td>
                                @contact.Position
                            </td>
                            <td>
                                @contact.Email
                            </td>
                            <td>
                                @contact.FirstName
                            </td>
                            <td>
                                @contact.Surname
                            </td>
                            <td>
                                @if (contact.LinkedinId == 0)
                                {
                                    <p>Отсутсвует</p>
                                }
                                else
                                {
                                    Linkedin linkedin = Linkedins.Where(p => p.Id == contact.LinkedinId).FirstOrDefault();
                                    <a @onclick="async _=> await AddLog(link:linkedin.FullLink)" href="https://@linkedin.FullLink">Перейти</a>
                                }
                            </td>
                            <td>
                                @if (checkedContacts.Contains(contact.Id))
                                {
                                    <input type="checkbox" value="@contact.Id" @onchange="(_=>Check(contact.Id))" checked />
                                }
                                else
                                {
                                    <input type="checkbox" value="@contact.Id" @onchange="(_=>Check(contact.Id))" />
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }

</div>

@code {

    Timer timer;
    private CancellationTokenSource _cts = new CancellationTokenSource();
    public int SelectedId;
    public CompanyModel CompanyModel;
    public string ModalDisplay = "none";
    IEnumerable<ContactDTO> contacts;
    List<int> checkedContacts;
    IEnumerable<Linkedin> Linkedins;
    IEnumerable<ContactDTO> SendForContacts;
    private async Task Check(int value)
    {
        if (checkedContacts.Contains(value))
        {
            checkedContacts.Remove(value);
        }
        else
        {
            checkedContacts.Add(value);
        }
        await InvokeAsync(StateHasChanged);
    }
    private async Task AddLog(int count = 0, string link = null)
    {
        if (count != 0)
        {
            LogDTO logDTO = new LogDTO
            {
                Action = "Добавил " + count + " контактов в lemmlist",
                UserId = TempService.CurrentUser.Id
            };
            await logService.AddLog(logDTO);
        }
        if (link != null)
        {
            LogDTO logDTO = new LogDTO
            {
                Action = "Просмотрел аккаунт LinkedIn пользователя  " + link,
                UserId = TempService.CurrentUser.Id
            };
            await logService.AddLog(logDTO);
        }
        await LogTemp.UpdateLogs();

    }
    private async Task Send()
    {
        SendForContacts = await MailFindService.FindContactsForId(checkedContacts.ToArray());
        ModalDisplay = "block";
        await InvokeAsync(StateHasChanged);
    }
    private async Task Close()
    {
        ModalDisplay = "none";
        await InvokeAsync(StateHasChanged);
    }
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await SelectService.UpdateCompanies();
        await CompanyMap.UpdateCompanies();
        checkedContacts = new List<int>();
        await RenderUpdate();
        StartCountdown();
        await base.SetParametersAsync(parameters);
    }

    public async Task RenderUpdate()
    {
        SelectedId = SelectService.GetId();
        if (SelectedId != 0)
        {
            CompanyModel = CompanyMap.companyModels.Where(p => p.Id == SelectedId).FirstOrDefault();
            contacts = await SelectService.GetCompanyContacts(SelectedId);
            Linkedins = SelectService.Linkedins;
            await InvokeAsync(StateHasChanged);

        }

        else
        {
            CompanyModel = null;
        }
    }
    void StartCountdown()
    {
        timer = new Timer(new TimerCallback(async _ =>
        {
            try
            {
                await RenderUpdate();
            }
            catch
            {
                _cts.Cancel();
                timer.Dispose();
            }
            await InvokeAsync(StateHasChanged);
        }), null, 2300, 700);
    }
    public void Dispose()
    {
        if (timer != null)
        {
            timer.Dispose();
        }
        _cts.Cancel();
    }
}
