@using System.Net.Http
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using CRM.BLL.DTO
@using CRM.BLL.Services
@using System.Threading;
@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CRM.BLL.Interfaces.ICompanyService companyService
@inject CRM.BLL.Services.SelectedItemService SelectService
@inject CRM.BLL.Services.TempService TempService
@inject CRM.BLL.Services.LogTemp LogTemp
@inject CRM.BLL.Interfaces.ILogService LogService
@code{
    Timer timer;
    private CancellationTokenSource _cts = new CancellationTokenSource();
    [Parameter]
    public string NewCompany { get; set; } = "block";
    [Parameter]
    public string Qualified { get; set; } = "none";
    [Parameter]
    public string NotQualified { get; set; } = "none";
    [Parameter]
    public string LeftStyle { get; set; } = @"'title-new-companies' 'content' 'content' 'content' 'content' 'content' 'content' 'content' 'content' 'content'
'title-qualified'
'title-not-qualified'";
    [Parameter]
    public int SelectedId { get; set; }

    public IEnumerable<CompanyDTO> NewCompanies;
    public IEnumerable<CompanyDTO> QualifiedCompanies;
    public IEnumerable<CompanyDTO> NotQualifiedCompanies;
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await SelectService.UpdateCompanies();
        await RenderUpdate();
        StartCountdown();
        await base.SetParametersAsync(parameters);
    }
    public async Task RenderUpdate()
    {
        if (TempService.CurrentUser != null)
        {
            NewCompanies = SelectService.NewCompanies;
            QualifiedCompanies = SelectService.QualifiedCompanies;
            NotQualifiedCompanies = SelectService.NotQualifiedCompanies;
        }

        SelectedId = SelectService.GetId();
    }
    void StartCountdown()
    {
        timer = new Timer(new TimerCallback(async _ =>
        {
            try
            {
                await RenderUpdate();
            }
            catch
            {
                _cts.Cancel();
                timer.Dispose();
            }
            await InvokeAsync(StateHasChanged);
        }), null, 5000, 900);
    }
    public int x = 0;
    public void Dispose()
    {
        timer.Dispose();
        _cts.Cancel();
    }
}
<div class="left" style="grid-template-areas:@LeftStyle">
    @if (TempService.CurrentUser != null)
    {
        <div class="title title-new-companies" @onclick="openNewCompaniesDiv">
            <span class="titleName">
                Новые компании
            </span>
            <div class="plus flex-center">
                +
            </div>
        </div>
        <div class="content content-new-companies" style="display:@NewCompany">
            @foreach (var company in NewCompanies)
            {
                if (company.Id != SelectedId)
                {
                    <div class="company-element" @onclick="@(e=>selectCompanyElement(company.Id))">
                        <a @onclick="_=>AddLog(WebSite:company.Website)" href="http://@company.Website" target="_blank">@company.CompanyLegalName</a> <br />
                    </div>
                }
                else
                {
                    <div style="background:red" class="company-element" @onclick="@(e=>selectCompanyElement(company.Id))">
                        <a @onclick="_=>AddLog(WebSite:company.Website)" href="http://@company.Website" target="_blank">@company.CompanyLegalName</a> <br />
                    </div>
                }
            }
        </div>
        <div class="title title-qualified" @onclick="openQualifiedDiv">
            Квалифицированные
        </div>
        <div class="content content-qualified" style="display:@Qualified">
            @foreach (var company in QualifiedCompanies)
            {
                if (company.Id != SelectedId)
                {
                    <div class="company-element" @onclick="@(e=>selectCompanyElement(company.Id))">
                        <a @onclick="_=>AddLog(WebSite:company.Website)" href="http://@company.Website" target="_blank">@company.CompanyLegalName</a> <br />
                    </div>
                }
                else
                {
                    <div style="background:red" class="company-element" @onclick="@(e=>selectCompanyElement(company.Id))">
                        <a @onclick="_=>AddLog(WebSite:company.Website)" href="http://@company.Website" target="_blank">@company.CompanyLegalName</a> <br />
                    </div>
                }
            }
        </div>
        <div class="title title-not-qualified" @onclick="openNotQualifiedDiv">
            Не квалифицированные
        </div>
        <div class="content content-not-qualified" style="display:@NotQualified">
            @foreach (var company in NotQualifiedCompanies)
            {
                if (company.Id != SelectedId)
                {
                    <div class="company-element" @onclick="@(e=>selectCompanyElement(company.Id))">
                        <a @onclick="_=>AddLog(WebSite:company.Website)" href="http://@company.Website" target="_blank">@company.CompanyLegalName</a> <br />
                    </div>
                }
                else
                {
                    <div style="background:red" class="company-element" @onclick="@(e=>selectCompanyElement(company.Id))">
                        <a @onclick="_=>AddLog(WebSite:company.Website)" href="http://@company.Website" target="_blank">@company.CompanyLegalName</a> <br />
                    </div>
                }
            }
        </div>
    }
    else
    {
        <h1>Авторизуйтесь!!!</h1>
    }

</div>
@code{

    private async Task selectCompanyElement(int id)
    {
        SelectService.SetId(id);
        SelectedId = id;
        await AddLog(id);

    }
    private async Task AddLog(int CompanyId = 0, string WebSite = null)
    {
        if (WebSite != null)
        {
            LogDTO logDTO = new LogDTO
            {
                Action = "Перешел на сайт " + WebSite,
                UserId = TempService.CurrentUser.Id
            };
            await LogService.AddLog(logDTO);
            Thread.Sleep(3000);
        }
        else if (WebSite==null&&CompanyId != 0)
        {
            LogDTO logDTO = new LogDTO
            {
                Action = "Просмотрел компанию " + SelectService.AllCompanies.Where(p => p.Id == SelectedId).FirstOrDefault().TradingName,
                UserId = TempService.CurrentUser.Id
            };
            await LogService.AddLog(logDTO);
        }
        
        await LogTemp.UpdateLogs();
         
    }
    private void openNewCompaniesDiv()
    {
        NewCompany = "block";
        Qualified = "none";
        NotQualified = "none";
        LeftStyle = @"'title-new-companies''content' 'content' 'content' 'content' 'content' 'content' 'content' 'content' 'content'
'title-qualified'
'title-not-qualified'";
    }
    private void openQualifiedDiv()
    {
        NewCompany = "none";
        Qualified = "block";
        NotQualified = "none";
        LeftStyle = @"'title-new-companies'
'title-qualified''content' 'content' 'content' 'content' 'content' 'content' 'content' 'content' 'content'
'title-not-qualified'";
    }
    private void openNotQualifiedDiv()
    {
        NewCompany = "none";
        Qualified = "none";
        NotQualified = "block";
        LeftStyle = @"'title-new-companies'
'title-qualified'
'title-not-qualified''content' 'content' 'content' 'content' 'content' 'content' 'content' 'content' 'content'";
    }
}
